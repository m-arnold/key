\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:safe",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 20000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_OFF",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_EXPAND",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Thu Dec 21 11:05:07 CET 2023
contract=A[A\\:\\:foo(A)].JML normal_behavior operation contract.0
name=A[A\\:\\:foo(A)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "marc" ) (keyVersion "b825228058d539f98b154e53e808c034c2824f09"))

(autoModeTime "0")

(branch "dummy ID"
 (opengoal "==>  (   (  (((((wellFormed(heap)<<origin(\"requires (implicit)\",\"[]\")>>       & (!(  self<<origin(\"requires (implicit)\", \"[]\")>>            = null)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>       & (  boolean::select(heap,                            self,                            java.lang.Object::<created>)          = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>       & (A::exactInstance(self) = TRUE)<<origin(\"requires (implicit)\",\"[]\")>>)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>       & ((  (  a<<origin(\"requires (implicit)\", \"[]\")>>              = null)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>           | (  boolean::select(heap,                                a,                                java.lang.Object::<created>)              = TRUE)<<origin(\"requires (implicit)\",\"[]\")>>)<<SC,                                                              origin(\"requires (implicit)\",\"[requires (implicit)]\")>>))<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>       & measuredByEmpty<<origin(\"requires (implicit)\",\"[]\")>>)<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>       & ((  java.lang.Object::<inv>(heap, self)<<impl>>           & (!a = null)<<impl>>)<<SC>>))<<origin(\"requires (implicit)\",\"[requires (implicit)]\")>>   -> ({heapAtPre:=heap || _a:=a}         (\\<{           exc = null;           try {             self.foo(_a)@A;           } catch (java.lang.Throwable e) {             exc = e;           }         }\\> ((  (((  int::select(heap,                                  C::select(heap,                                            B::select(heap,                                                      a,                                                      A::$b),                                            B::$c),                                  C::$x)                    = int::select(heap,                                  B::select(heap,                                            a,                                            A::$b),                                  B::$x))<<origin(\"ensures @ file A.java @ line 8\",\"[]\")>>               & java.lang.Object::<inv>(heap, self)<<impl>>)<<SC,                                                               origin(\"ensures @ file A.java @ line 8\",\"[ensures @ file A.java @ line 8]\")>>               & (  exc<<origin(\"ensures (implicit)\",\"[]\")>>                  = null)<<impl,                           origin(\"ensures (implicit)\",\"[ensures (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file A.java @ line 8, ensures (implicit)]\")>>               & (\\forall Field f;                    (\\forall java.lang.Object o;                       ((  (elementOf(o, f, allLocs)<<origin(\"assignable (implicit)\",\"[]\")>>                         | ((!(o = null)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                         & (!(  boolean::select(heapAtPre,                                                o,                                                java.lang.Object::<created>)                              = TRUE)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                         | (  any::select(heap, o, f)                            = any::select(heapAtPre,                                          o,                                          f))<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>))<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file A.java @ line 8, ensures (implicit), assignable (implicit)]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file A.java @ line 8, ensures (implicit), assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file A.java @ line 8, ensures (implicit), assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[requires (implicit), ensures @ file A.java @ line 8, ensures (implicit), assignable (implicit)]\")>>")
)
}
